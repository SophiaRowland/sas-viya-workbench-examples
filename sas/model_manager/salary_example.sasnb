[{"kind":1,"language":"markdown","value":"# SAS Viya Workbench & SAS Model Manager - Salary Demo Example\r\nIn this  example, you will create two SAS models on SAS Viya Workbench and register them both into SAS Model Manager on SAS Viya. This requires having access to an installation of SAS Model Manager on SAS Viya. The first model you will develop creates data step score code whereas the second model creates an analytical store file. Both will be partitioned into training, testing, and validation sets.  \r\n    \r\nTo ensure you can interact with SAS Viya, your administrator may need to whitelist the IP address of you Workbench. You can find the IP address by opening a terminal on Workbench, typing _curl ip.me_ and hitting enter. After your Workbench IP address is whitelisted for the SAS Viya environment, follow [these steps](https://go.documentation.sas.com/doc/en/workbenchcdc/default/vwbcasml/vwbcasml_registermodel_details06.htm) to authenticate to the SAS Viya environment and generate the access token. These steps are also available in the authentication_example.sasnb file and the access token can be saved using the myToken.sas file. \r\n    \r\nUse the cells below to save your server URL.","outputs":[]},{"kind":2,"language":"sas","value":"%let myServerURL=\"insert-server-url-here\";\r\n%put &=myServerURL","outputs":[]},{"kind":1,"language":"markdown","value":"On the properties tab of the project in SAS Model Manager, find the project UUID. Create a project if there is not one already available. Copy the project UUID and paste it below.","outputs":[]},{"kind":2,"language":"sas","value":"%let myProjectID=\"insert-project-id-here\";\r\n%put &=myProjectID","outputs":[]},{"kind":1,"language":"markdown","value":"Upload the salary data into SAS Viya Workbench and update the link below. Next, load the data into your work library.  ","outputs":[]},{"kind":2,"language":"sas","value":"options nosource nonotes;\r\nproc import\r\n    datafile=\"&WORKSPACE_PATH./sas-viya-workbench-examples/data/adult_train.csv\"\r\n    out=adult_salary dbms=csv replace;\r\nrun;","outputs":[]},{"kind":1,"language":"markdown","value":"View the data. ","outputs":[]},{"kind":2,"language":"sas","value":"proc print data=adult_salary (obs=5); run;","outputs":[]},{"kind":1,"language":"markdown","value":"Train a simple logistic regression and save the data step score code. ","outputs":[]},{"kind":2,"language":"sas","value":"proc logselect data=adult_salary;\r\n    partition fraction (validate=0.1 test=0.2 seed=123);\r\n    class GE50K WorkClass Education MartialStatus Occupation Relationship Race Sex NativeCountry;\r\n    model GE50K(event='1') = Age WorkClass Education MartialStatus Occupation Relationship Race Sex HoursPerWeek NativeCountry;\r\n    code file = \"log_model.sas\";\r\n    output out=log_scored copyvars = (GE50K Age WorkClass Education MartialStatus Occupation Relationship Race Sex HoursPerWeek NativeCountry) role pred;\r\nrun;","outputs":[]},{"kind":1,"language":"markdown","value":"And view the output data. ","outputs":[]},{"kind":2,"language":"sas","value":"proc print data=log_scored (obs=10); run;","outputs":[]},{"kind":1,"language":"markdown","value":"The next step assumes that the event probability variables take a specific form. Add those into our scored data now. ","outputs":[]},{"kind":2,"language":"sas","value":"data log_scored1;\r\n    set log_scored;\r\n    P_GE50K1 = _PRED_;\r\n    P_GE50K0 = 1 - _PRED_;\r\nrun;","outputs":[]},{"kind":1,"language":"markdown","value":"Look at the new scored data to see the two new variables. ","outputs":[]},{"kind":2,"language":"sas","value":"proc print data=log_scored1 (obs=10); run;","outputs":[]},{"kind":1,"language":"markdown","value":"Finally, register the model into your project on SAS Viya. ","outputs":[]},{"kind":2,"language":"sas","value":"options source notes;\r\nproc registermodel  \r\n                name=\"Logistic Regression\" \r\n                algorithm = LOGISTIC\r\n                data = work.log_scored1\r\n                function = CLASSIFICATION\r\n                modeler = \"your-username\"\r\n                replace\r\n                oauthtoken = \"myToken\"\r\n                server = &myServerURL;\r\n            project id = &myProjectID;\r\n            assessment partitionvar = _ROLE_(train=\"1\" validate=\"2\" test=\"3\"); \r\n            target GE50K / level=binary event=\"1\";\r\n            code file= \"log_model.sas\";\r\nrun; ","outputs":[]},{"kind":1,"language":"markdown","value":"After this block completes, you should be able to see model in your SAS Model Manager project. \r\n\r\nNext, try a model that generates an analytical store, like a Gradient Boosting model. ","outputs":[]},{"kind":2,"language":"sas","value":"proc gradboost data=adult_salary;\r\n    partition fraction (validate=0.1 test=0.2 seed=123);\r\n    input WorkClass Education MartialStatus Occupation Relationship Race Sex NativeCountry / level=nominal;\r\n    input Age HoursPerWeek / level=interval;\r\n    target GE50K / level=nominal;\r\n    savestate rstore=gbstore;\r\n    output out=gb_scored copyvar=(GE50K Age WorkClass Education MartialStatus Occupation Relationship Race Sex HoursPerWeek NativeCountry) role;\r\nrun;","outputs":[]},{"kind":1,"language":"markdown","value":"Download the analytical store to a binary file. ","outputs":[]},{"kind":2,"language":"sas","value":"proc astore;\r\n   download rstore = work.gbstore\r\n            store = \"gbAstore.sasast\";\r\nrun;","outputs":[]},{"kind":1,"language":"markdown","value":"You can save the astore file locally and import it directly to SAS Model Manager. This file will have everything it needs to execute after import into SAS Model Manager, but it will lack the assessment files for the model card and model comparison.  \n\nBut, running the next block will register the model into SAS Model Manager with these files, so I suggest taking that route. ","outputs":[]},{"kind":2,"language":"sas","value":"proc registermodel\r\n      name = \"Gradient Boosting\"\r\n      data = work.gb_scored\r\n      algorithm = GRADBOOST\r\n      function = CLASSIFICATION\r\n      server = &myServerURL\r\n      modeler = \"your-username\"\r\n      oauthtoken = \"myToken\"\r\n      replace;\r\n   project id = &myProjectID;\r\n   astoremodel store = \"gbAstore.sasast\";\r\n   target GE50K / level=binary event=\"1\";\r\n   assessment partitionvar = _ROLE_(train=\"1\" validate=\"2\" test=\"3\");\r\nrun;","outputs":[]},{"kind":1,"language":"markdown","value":"Now, you should have two models in SAS Model Manager ready to execute and build complete model cards!\n***","outputs":[]}]